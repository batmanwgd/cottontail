<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Carbon\FactoryImmutable" namespace="Carbon" name="FactoryImmutable" abstract="false" final="false" start="224" end="227">
  <file path="/Users/nyuszi/_Development/_Keycloak/_Showcase/_roboto/cottontail/vendor/nesbot/carbon/src/Carbon" file="FactoryImmutable.php" realpath="/Users/nyuszi/_Development/_Keycloak/_Showcase/_roboto/cottontail/vendor/nesbot/carbon/src/Carbon/FactoryImmutable.php" size="52278" time="2021-05-07T10:08:30+00:00" unixtime="1620382110" sha1="47cd0ff45563f48f4ea517d47de6488af9572870" relative="vendor/nesbot/carbon/src/Carbon/FactoryImmutable.php"/>
  <docblock>
    <description compact="A factory to generate CarbonImmutable instances with common settings.">&lt;autodoc generated by `composer phpdoc`&gt;</description>
    <method value="bool                                               canBeCreatedFromFormat($date, $format)                                                                                             Checks if the (date)time string is in a given format and valid to create a new instance."/>
    <method value="CarbonImmutable|false                              create($year = 0, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)                                           Create a new Carbon instance from a specific date and time. If any of $year, $month or $day are set to null their now() values will be used. If $hour is null it will be set to its now() value and the default values for $minute and $second will be their now() values. If $hour is not null then the default values for $minute and $second will be 0."/>
    <method value="CarbonImmutable                                    createFromDate($year = null, $month = null, $day = null, $tz = null)                                                               Create a Carbon instance from just a date. The time portion is set to now."/>
    <method value="CarbonImmutable|false                              createFromFormat($format, $time, $tz = null)                                                                                       Create a Carbon instance from a specific format."/>
    <method value="CarbonImmutable|false                              createFromIsoFormat($format, $time, $tz = null, $locale = 'en', $translator = null)                                                Create a Carbon instance from a specific ISO format (same replacements as -&gt;isoFormat())."/>
    <method value="CarbonImmutable|false                              createFromLocaleFormat($format, $locale, $time, $tz = null)                                                                        Create a Carbon instance from a specific format and a string in a given language."/>
    <method value="CarbonImmutable|false                              createFromLocaleIsoFormat($format, $locale, $time, $tz = null)                                                                     Create a Carbon instance from a specific ISO format and a string in a given language."/>
    <method value="CarbonImmutable                                    createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null)                                                                    Create a Carbon instance from just a time. The date portion is set to today."/>
    <method value="CarbonImmutable                                    createFromTimeString($time, $tz = null)                                                                                            Create a Carbon instance from a time string. The date portion is set to today."/>
    <method value="CarbonImmutable                                    createFromTimestamp($timestamp, $tz = null)                                                                                        Create a Carbon instance from a timestamp and set the timezone (use default one if not specified). Timestamp input can be given as int, float or a string containing one or more numbers."/>
    <method value="CarbonImmutable                                    createFromTimestampMs($timestamp, $tz = null)                                                                                      Create a Carbon instance from a timestamp in milliseconds. Timestamp input can be given as int, float or a string containing one or more numbers."/>
    <method value="CarbonImmutable                                    createFromTimestampMsUTC($timestamp)                                                                                               Create a Carbon instance from a timestamp in milliseconds. Timestamp input can be given as int, float or a string containing one or more numbers."/>
    <method value="CarbonImmutable                                    createFromTimestampUTC($timestamp)                                                                                                 Create a Carbon instance from an timestamp keeping the timezone to UTC. Timestamp input can be given as int, float or a string containing one or more numbers."/>
    <method value="CarbonImmutable                                    createMidnightDate($year = null, $month = null, $day = null, $tz = null)                                                           Create a Carbon instance from just a date. The time portion is set to midnight."/>
    <method value="CarbonImmutable|false                              createSafe($year = null, $month = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null)                     Create a new safe Carbon instance from a specific date and time. If any of $year, $month or $day are set to null their now() values will be used. If $hour is null it will be set to its now() value and the default values for $minute and $second will be their now() values. If $hour is not null then the default values for $minute and $second will be 0. If one of the set values is not valid, an InvalidDateException will be thrown."/>
    <method value="CarbonImmutable                                    disableHumanDiffOption($humanDiffOption)                                                                                           @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method."/>
    <method value="CarbonImmutable                                    enableHumanDiffOption($humanDiffOption)                                                                                            @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method."/>
    <method value="mixed                                              executeWithLocale($locale, $func)                                                                                                  Set the current locale to the given, execute the passed function, reset the locale to previous one, then return the result of the closure (or null if the closure was void)."/>
    <method value="CarbonImmutable                                    fromSerialized($value)                                                                                                             Create an instance from a serialized string."/>
    <method value="void                                               genericMacro($macro, $priority = 0)                                                                                                Register a custom macro."/>
    <method value="array                                              getAvailableLocales()                                                                                                              Returns the list of internally available locales and already loaded custom locales. (It will ignore custom translator dynamic loading.)"/>
    <method value="Language[]                                         getAvailableLocalesInfo()                                                                                                          Returns list of Language object for each available locale. This object allow you to get the ISO name, native name, region and variant of the locale."/>
    <method value="array                                              getDays()                                                                                                                          Get the days of the week"/>
    <method value="string|null                                        getFallbackLocale()                                                                                                                Get the fallback locale."/>
    <method value="array                                              getFormatsToIsoReplacements()                                                                                                      List of replacements from date() format to isoFormat()."/>
    <method value="int                                                getHumanDiffOptions()                                                                                                              Return default humanDiff() options (merged flags as integer)."/>
    <method value="array                                              getIsoUnits()                                                                                                                      Returns list of locale units for ISO formatting."/>
    <method value="CarbonImmutable                                    getLastErrors()                                                                                                                    {@inheritdoc}"/>
    <method value="string                                             getLocale()                                                                                                                        Get the current translator locale."/>
    <method value="callable|null                                      getMacro($name)                                                                                                                    Get the raw callable macro registered globally for a given name."/>
    <method value="int                                                getMidDayAt()                                                                                                                      get midday/noon hour"/>
    <method value="Closure|CarbonImmutable                            getTestNow()                                                                                                                       Get the Carbon instance (real or mock) to be returned when a &quot;now&quot; instance is created."/>
    <method value="string                                             getTimeFormatByPrecision($unitPrecision)                                                                                           Return a format from H:i to H:i:s.u according to given unit precision."/>
    <method value="string                                             getTranslationMessageWith($translator, string $key, string $locale = null, string $default = null)                                 Returns raw translation message for a given key."/>
    <method value="\Symfony\Component\Translation\TranslatorInterface getTranslator()                                                                                                                    Get the default translator instance in use."/>
    <method value="int                                                getWeekEndsAt()                                                                                                                    Get the last day of week"/>
    <method value="int                                                getWeekStartsAt()                                                                                                                  Get the first day of week"/>
    <method value="array                                              getWeekendDays()                                                                                                                   Get weekend days"/>
    <method value="bool                                               hasFormat($date, $format)                                                                                                          Checks if the (date)time string is in a given format."/>
    <method value="bool                                               hasFormatWithModifiers($date, $format)                                                                                             Checks if the (date)time string is in a given format."/>
    <method value="bool                                               hasMacro($name)                                                                                                                    Checks if macro is registered globally."/>
    <method value="bool                                               hasRelativeKeywords($time)                                                                                                         Determine if a time string will produce a relative date."/>
    <method value="bool                                               hasTestNow()                                                                                                                       Determine if there is a valid test instance set. A valid test instance is anything that is not null."/>
    <method value="CarbonImmutable                                    instance($date)                                                                                                                    Create a Carbon instance from a DateTime one."/>
    <method value="bool                                               isImmutable()                                                                                                                      Returns true if the current class/instance is immutable."/>
    <method value="bool                                               isModifiableUnit($unit)                                                                                                            Returns true if a property can be changed via setter."/>
    <method value="bool                                               isMutable()                                                                                                                        Returns true if the current class/instance is mutable."/>
    <method value="bool                                               isStrictModeEnabled()                                                                                                              Returns true if the strict mode is globally in use, false else. (It can be overridden in specific instances.)"/>
    <method value="bool                                               localeHasDiffOneDayWords($locale)                                                                                                  Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow). Support is considered enabled if the 3 words are translated in the given locale."/>
    <method value="bool                                               localeHasDiffSyntax($locale)                                                                                                       Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after). Support is considered enabled if the 4 sentences are translated in the given locale."/>
    <method value="bool                                               localeHasDiffTwoDayWords($locale)                                                                                                  Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow). Support is considered enabled if the 2 words are translated in the given locale."/>
    <method value="bool                                               localeHasPeriodSyntax($locale)                                                                                                     Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X). Support is considered enabled if the 4 sentences are translated in the given locale."/>
    <method value="bool                                               localeHasShortUnits($locale)                                                                                                       Returns true if the given locale is internally supported and has short-units support. Support is considered enabled if either year, day or hour has a short variant translated."/>
    <method value="void                                               macro($name, $macro)                                                                                                               Register a custom macro."/>
    <method value="CarbonImmutable|null                               make($var)                                                                                                                         Make a Carbon instance from given variable if possible. Always return a new instance. Parse only strings and only these likely to be dates (skip intervals and recurrences). Throw an exception for invalid format, but otherwise return null."/>
    <method value="CarbonImmutable                                    maxValue()                                                                                                                         Create a Carbon instance for the greatest supported date."/>
    <method value="CarbonImmutable                                    minValue()                                                                                                                         Create a Carbon instance for the lowest supported date."/>
    <method value="void                                               mixin($mixin)                                                                                                                      Mix another object into the class."/>
    <method value="CarbonImmutable                                    now($tz = null)                                                                                                                    Get a Carbon instance for the current date and time."/>
    <method value="CarbonImmutable                                    parse($time = null, $tz = null)                                                                                                    Create a carbon instance from a string. This is an alias for the constructor that allows better fluent syntax as it allows you to do Carbon::parse('Monday next week')-&gt;fn() rather than (new Carbon('Monday next week'))-&gt;fn()."/>
    <method value="CarbonImmutable                                    parseFromLocale($time, $locale = null, $tz = null)                                                                                 Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.)."/>
    <method value="string                                             pluralUnit(string $unit)                                                                                                           Returns standardized plural of a given singular/plural unit name (in English)."/>
    <method value="CarbonImmutable|false                              rawCreateFromFormat($format, $time, $tz = null)                                                                                    Create a Carbon instance from a specific format."/>
    <method value="CarbonImmutable                                    rawParse($time = null, $tz = null)                                                                                                 Create a carbon instance from a string. This is an alias for the constructor that allows better fluent syntax as it allows you to do Carbon::parse('Monday next week')-&gt;fn() rather than (new Carbon('Monday next week'))-&gt;fn()."/>
    <method value="CarbonImmutable                                    resetMacros()                                                                                                                      Remove all macros and generic macros."/>
    <method value="void                                               resetMonthsOverflow()                                                                                                              @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method. Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants are available for quarters, years, decade, centuries, millennia (singular and plural forms)."/>
    <method value="void                                               resetToStringFormat()                                                                                                              Reset the format used to the default when type juggling a Carbon instance to a string"/>
    <method value="void                                               resetYearsOverflow()                                                                                                               @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method. Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants are available for quarters, years, decade, centuries, millennia (singular and plural forms)."/>
    <method value="void                                               serializeUsing($callback)                                                                                                          @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather transform Carbon object before the serialization. JSON serialize all Carbon instances using the given callback."/>
    <method value="CarbonImmutable                                    setFallbackLocale($locale)                                                                                                         Set the fallback locale."/>
    <method value="CarbonImmutable                                    setHumanDiffOptions($humanDiffOptions)                                                                                             @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method."/>
    <method value="bool                                               setLocale($locale)                                                                                                                 Set the current translator locale and indicate if the source locale file exists. Pass 'auto' as locale to use closest language from the current LC_TIME locale."/>
    <method value="void                                               setMidDayAt($hour)                                                                                                                 @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather consider mid-day is always 12pm, then if you need to test if it's an other hour, test it explicitly: $date-&gt;format('G') == 13 or to set explicitly to a given hour: $date-&gt;setTime(13, 0, 0, 0) Set midday/noon hour"/>
    <method value="CarbonImmutable                                    setTestNow($testNow = null)                                                                                                        Set a Carbon instance (real or mock) to be returned when a &quot;now&quot; instance is created.  The provided instance will be returned specifically under the following conditions: - A call to the static now() method, ex. Carbon::now() - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null) - When the string &quot;now&quot; is passed to the constructor or parse(), ex. new Carbon('now') - When a string containing the desired time is passed to Carbon::parse(). Note the timezone parameter was left out of the examples above and has no affect as the mock value will be returned regardless of its value. To clear the test instance call this method using the default parameter of null. /!\ Use this method for unit tests only."/>
    <method value="void                                               setToStringFormat($format)                                                                                                         @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and use other method or custom format passed to format() method if you need to dump an other string format. Set the default format used when type juggling a Carbon instance to a string"/>
    <method value="void                                               setTranslator(\Symfony\Component\Translation\TranslatorInterface $translator)                                                      Set the default translator instance to use."/>
    <method value="CarbonImmutable                                    setUtf8($utf8)                                                                                                                     @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use UTF-8 language packages on every machine. Set if UTF8 will be used for localized date/time."/>
    <method value="void                                               setWeekEndsAt($day)                                                                                                                @deprecated To avoid conflict between different third-party libraries, static setters should not be used. Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek or roundWeek method. You can also use the 'first_day_of_week' locale setting to change the start of week according to current locale selected and implicitly the end of week. Set the last day of week"/>
    <method value="void                                               setWeekStartsAt($day)                                                                                                              @deprecated To avoid conflict between different third-party libraries, static setters should not be used. Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the 'first_day_of_week' locale setting to change the start of week according to current locale selected and implicitly the end of week. Set the first day of week"/>
    <method value="void                                               setWeekendDays($days)                                                                                                              @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather consider week-end is always saturday and sunday, and if you have some custom week-end days to handle, give to those days an other name and create a macro for them: ``` Carbon::macro('isDayOff', function ($date) { return $date-&gt;isSunday() || $date-&gt;isMonday(); }); Carbon::macro('isNotDayOff', function ($date) { return !$date-&gt;isDayOff(); }); if ($someDate-&gt;isDayOff()) ... if ($someDate-&gt;isNotDayOff()) ... // Add 5 not-off days $count = 5; while ($someDate-&gt;isDayOff() || ($count-- &gt; 0)) { $someDate-&gt;addDay(); } ``` Set weekend days"/>
    <method value="bool                                               shouldOverflowMonths()                                                                                                             Get the month overflow global behavior (can be overridden in specific instances)."/>
    <method value="bool                                               shouldOverflowYears()                                                                                                              Get the month overflow global behavior (can be overridden in specific instances)."/>
    <method value="string                                             singularUnit(string $unit)                                                                                                         Returns standardized singular of a given singular/plural unit name (in English)."/>
    <method value="CarbonImmutable                                    today($tz = null)                                                                                                                  Create a Carbon instance for today."/>
    <method value="CarbonImmutable                                    tomorrow($tz = null)                                                                                                               Create a Carbon instance for tomorrow."/>
    <method value="string                                             translateTimeString($timeString, $from = null, $to = null, $mode = CarbonInterface::TRANSLATE_ALL)                                 Translate a time string from a locale to an other."/>
    <method value="string                                             translateWith(\Symfony\Component\Translation\TranslatorInterface $translator, string $key, array $parameters = [], $number = null) Translate using translation string or callback available."/>
    <method value="void                                               useMonthsOverflow($monthsOverflow = true)                                                                                          @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method. Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants are available for quarters, years, decade, centuries, millennia (singular and plural forms)."/>
    <method value="CarbonImmutable                                    useStrictMode($strictModeEnabled = true)                                                                                           @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method."/>
    <method value="void                                               useYearsOverflow($yearsOverflow = true)                                                                                            @deprecated To avoid conflict between different third-party libraries, static setters should not be used. You should rather use the -&gt;settings() method. Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants are available for quarters, years, decade, centuries, millennia (singular and plural forms)."/>
    <method value="CarbonImmutable                                    withTestNow($testNow = null, $callback = null)                                                                                     Temporarily sets a static date to be used within the callback. Using setTestNow to set the date, executing the callback, then clearing the test instance. /!\ Use this method for unit tests only."/>
    <method value="CarbonImmutable                                    yesterday($tz = null)                                                                                                              Create a Carbon instance for yesterday. &lt;/autodoc&gt;"/>
  </docblock>
  <extends full="Carbon\Factory" namespace="Carbon" name="Factory" unresolved="true"/>
  <member name="className" default="" type="{unknown}" constant="CarbonImmutable::class" visibility="protected" static="false" line="226"/>
</class>
