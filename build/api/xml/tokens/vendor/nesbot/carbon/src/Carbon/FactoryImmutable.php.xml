<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/Users/nyuszi/_Development/_Keycloak/_Showcase/_roboto/cottontail/vendor/nesbot/carbon/src/Carbon" file="FactoryImmutable.php" realpath="/Users/nyuszi/_Development/_Keycloak/_Showcase/_roboto/cottontail/vendor/nesbot/carbon/src/Carbon/FactoryImmutable.php" size="52278" time="2021-05-07T10:08:30+00:00" unixtime="1620382110" sha1="47cd0ff45563f48f4ea517d47de6488af9572870" relative="vendor/nesbot/carbon/src/Carbon/FactoryImmutable.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * This file is part of the Carbon package.</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * (c) Brian Nesbitt &lt;brian@nesbot.com&gt;</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * file that was distributed with this source code.</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="11">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Carbon</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="12"/>
  <line no="13">
    <token name="T_USE">use</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Closure</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="14"/>
  <line no="15">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> * A factory to generate CarbonImmutable instances with common settings.</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> * &lt;autodoc generated by `composer phpdoc`&gt;</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * @method bool                                               canBeCreatedFromFormat($date, $format)                                                                                             Checks if the (date)time string is in a given format and valid to create a</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               new instance.</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              create($year = 0, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)                                           Create a new Carbon instance from a specific date and time.</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If any of $year, $month or $day are set to null their now() values will</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               be used.</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If $hour is null it will be set to its now() value and the default</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               values for $minute and $second will be their now() values.</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If $hour is not null then the default values for $minute and $second</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               will be 0.</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromDate($year = null, $month = null, $day = null, $tz = null)                                                               Create a Carbon instance from just a date. The time portion is set to now.</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              createFromFormat($format, $time, $tz = null)                                                                                       Create a Carbon instance from a specific format.</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              createFromIsoFormat($format, $time, $tz = null, $locale = 'en', $translator = null)                                                Create a Carbon instance from a specific ISO format (same replacements as -&gt;isoFormat()).</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              createFromLocaleFormat($format, $locale, $time, $tz = null)                                                                        Create a Carbon instance from a specific format and a string in a given language.</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              createFromLocaleIsoFormat($format, $locale, $time, $tz = null)                                                                     Create a Carbon instance from a specific ISO format and a string in a given language.</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null)                                                                    Create a Carbon instance from just a time. The date portion is set to today.</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromTimeString($time, $tz = null)                                                                                            Create a Carbon instance from a time string. The date portion is set to today.</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromTimestamp($timestamp, $tz = null)                                                                                        Create a Carbon instance from a timestamp and set the timezone (use default one if not specified).</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Timestamp input can be given as int, float or a string containing one or more numbers.</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromTimestampMs($timestamp, $tz = null)                                                                                      Create a Carbon instance from a timestamp in milliseconds.</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Timestamp input can be given as int, float or a string containing one or more numbers.</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromTimestampMsUTC($timestamp)                                                                                               Create a Carbon instance from a timestamp in milliseconds.</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Timestamp input can be given as int, float or a string containing one or more numbers.</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createFromTimestampUTC($timestamp)                                                                                                 Create a Carbon instance from an timestamp keeping the timezone to UTC.</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Timestamp input can be given as int, float or a string containing one or more numbers.</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    createMidnightDate($year = null, $month = null, $day = null, $tz = null)                                                           Create a Carbon instance from just a date. The time portion is set to midnight.</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              createSafe($year = null, $month = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null)                     Create a new safe Carbon instance from a specific date and time.</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If any of $year, $month or $day are set to null their now() values will</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               be used.</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If $hour is null it will be set to its now() value and the default</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               values for $minute and $second will be their now() values.</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If $hour is not null then the default values for $minute and $second</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               will be 0.</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               If one of the set values is not valid, an InvalidDateException</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               will be thrown.</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    disableHumanDiffOption($humanDiffOption)                                                                                           @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    enableHumanDiffOption($humanDiffOption)                                                                                            @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT"> * @method mixed                                              executeWithLocale($locale, $func)                                                                                                  Set the current locale to the given, execute the passed function, reset the locale to previous one,</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               then return the result of the closure (or null if the closure was void).</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    fromSerialized($value)                                                                                                             Create an instance from a serialized string.</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT"> * @method void                                               genericMacro($macro, $priority = 0)                                                                                                Register a custom macro.</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT"> * @method array                                              getAvailableLocales()                                                                                                              Returns the list of internally available locales and already loaded custom locales.</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               (It will ignore custom translator dynamic loading.)</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT"> * @method Language[]                                         getAvailableLocalesInfo()                                                                                                          Returns list of Language object for each available locale. This object allow you to get the ISO name, native</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               name, region and variant of the locale.</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT"> * @method array                                              getDays()                                                                                                                          Get the days of the week</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT"> * @method string|null                                        getFallbackLocale()                                                                                                                Get the fallback locale.</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT"> * @method array                                              getFormatsToIsoReplacements()                                                                                                      List of replacements from date() format to isoFormat().</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT"> * @method int                                                getHumanDiffOptions()                                                                                                              Return default humanDiff() options (merged flags as integer).</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT"> * @method array                                              getIsoUnits()                                                                                                                      Returns list of locale units for ISO formatting.</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    getLastErrors()                                                                                                                    {@inheritdoc}</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT"> * @method string                                             getLocale()                                                                                                                        Get the current translator locale.</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT"> * @method callable|null                                      getMacro($name)                                                                                                                    Get the raw callable macro registered globally for a given name.</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT"> * @method int                                                getMidDayAt()                                                                                                                      get midday/noon hour</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT"> * @method Closure|CarbonImmutable                            getTestNow()                                                                                                                       Get the Carbon instance (real or mock) to be returned when a "now"</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               instance is created.</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT"> * @method string                                             getTimeFormatByPrecision($unitPrecision)                                                                                           Return a format from H:i to H:i:s.u according to given unit precision.</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT"> * @method string                                             getTranslationMessageWith($translator, string $key, string $locale = null, string $default = null)                                 Returns raw translation message for a given key.</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT"> * @method \Symfony\Component\Translation\TranslatorInterface getTranslator()                                                                                                                    Get the default translator instance in use.</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT"> * @method int                                                getWeekEndsAt()                                                                                                                    Get the last day of week</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT"> * @method int                                                getWeekStartsAt()                                                                                                                  Get the first day of week</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT"> * @method array                                              getWeekendDays()                                                                                                                   Get weekend days</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT"> * @method bool                                               hasFormat($date, $format)                                                                                                          Checks if the (date)time string is in a given format.</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT"> * @method bool                                               hasFormatWithModifiers($date, $format)                                                                                             Checks if the (date)time string is in a given format.</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT"> * @method bool                                               hasMacro($name)                                                                                                                    Checks if macro is registered globally.</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT"> * @method bool                                               hasRelativeKeywords($time)                                                                                                         Determine if a time string will produce a relative date.</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT"> * @method bool                                               hasTestNow()                                                                                                                       Determine if there is a valid test instance set. A valid test instance</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               is anything that is not null.</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    instance($date)                                                                                                                    Create a Carbon instance from a DateTime one.</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT"> * @method bool                                               isImmutable()                                                                                                                      Returns true if the current class/instance is immutable.</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT"> * @method bool                                               isModifiableUnit($unit)                                                                                                            Returns true if a property can be changed via setter.</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT"> * @method bool                                               isMutable()                                                                                                                        Returns true if the current class/instance is mutable.</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT"> * @method bool                                               isStrictModeEnabled()                                                                                                              Returns true if the strict mode is globally in use, false else.</token>
  </line>
  <line no="94">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               (It can be overridden in specific instances.)</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT"> * @method bool                                               localeHasDiffOneDayWords($locale)                                                                                                  Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).</token>
  </line>
  <line no="96">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Support is considered enabled if the 3 words are translated in the given locale.</token>
  </line>
  <line no="97">
    <token name="T_DOC_COMMENT"> * @method bool                                               localeHasDiffSyntax($locale)                                                                                                       Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Support is considered enabled if the 4 sentences are translated in the given locale.</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT"> * @method bool                                               localeHasDiffTwoDayWords($locale)                                                                                                  Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Support is considered enabled if the 2 words are translated in the given locale.</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT"> * @method bool                                               localeHasPeriodSyntax($locale)                                                                                                     Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Support is considered enabled if the 4 sentences are translated in the given locale.</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT"> * @method bool                                               localeHasShortUnits($locale)                                                                                                       Returns true if the given locale is internally supported and has short-units support.</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Support is considered enabled if either year, day or hour has a short variant translated.</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT"> * @method void                                               macro($name, $macro)                                                                                                               Register a custom macro.</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|null                               make($var)                                                                                                                         Make a Carbon instance from given variable if possible.</token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Always return a new instance. Parse only strings and only these likely to be dates (skip intervals</token>
  </line>
  <line no="108">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               and recurrences). Throw an exception for invalid format, but otherwise return null.</token>
  </line>
  <line no="109">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    maxValue()                                                                                                                         Create a Carbon instance for the greatest supported date.</token>
  </line>
  <line no="110">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    minValue()                                                                                                                         Create a Carbon instance for the lowest supported date.</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT"> * @method void                                               mixin($mixin)                                                                                                                      Mix another object into the class.</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    now($tz = null)                                                                                                                    Get a Carbon instance for the current date and time.</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    parse($time = null, $tz = null)                                                                                                    Create a carbon instance from a string.</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               This is an alias for the constructor that allows better fluent syntax</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               as it allows you to do Carbon::parse('Monday next week')-&gt;fn() rather</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               than (new Carbon('Monday next week'))-&gt;fn().</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    parseFromLocale($time, $locale = null, $tz = null)                                                                                 Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT"> * @method string                                             pluralUnit(string $unit)                                                                                                           Returns standardized plural of a given singular/plural unit name (in English).</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable|false                              rawCreateFromFormat($format, $time, $tz = null)                                                                                    Create a Carbon instance from a specific format.</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    rawParse($time = null, $tz = null)                                                                                                 Create a carbon instance from a string.</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               This is an alias for the constructor that allows better fluent syntax</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               as it allows you to do Carbon::parse('Monday next week')-&gt;fn() rather</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               than (new Carbon('Monday next week'))-&gt;fn().</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    resetMacros()                                                                                                                      Remove all macros and generic macros.</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT"> * @method void                                               resetMonthsOverflow()                                                                                                              @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="127">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants</token>
  </line>
  <line no="128">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           are available for quarters, years, decade, centuries, millennia (singular and plural forms).</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT"> * @method void                                               resetToStringFormat()                                                                                                              Reset the format used to the default when type juggling a Carbon instance to a string</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT"> * @method void                                               resetYearsOverflow()                                                                                                               @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           are available for quarters, years, decade, centuries, millennia (singular and plural forms).</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT"> * @method void                                               serializeUsing($callback)                                                                                                          @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather transform Carbon object before the serialization.</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               JSON serialize all Carbon instances using the given callback.</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    setFallbackLocale($locale)                                                                                                         Set the fallback locale.</token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    setHumanDiffOptions($humanDiffOptions)                                                                                             @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="139">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="140">
    <token name="T_DOC_COMMENT"> * @method bool                                               setLocale($locale)                                                                                                                 Set the current translator locale and indicate if the source locale file exists.</token>
  </line>
  <line no="141">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Pass 'auto' as locale to use closest language from the current LC_TIME locale.</token>
  </line>
  <line no="142">
    <token name="T_DOC_COMMENT"> * @method void                                               setMidDayAt($hour)                                                                                                                 @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather consider mid-day is always 12pm, then if you need to test if it's an other</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           hour, test it explicitly:</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                               $date-&gt;format('G') == 13</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           or to set explicitly to a given hour:</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                               $date-&gt;setTime(13, 0, 0, 0)</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Set midday/noon hour</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    setTestNow($testNow = null)                                                                                                        Set a Carbon instance (real or mock) to be returned when a "now"</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               instance is created.  The provided instance will be returned</token>
  </line>
  <line no="151">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               specifically under the following conditions:</token>
  </line>
  <line no="152">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                 - A call to the static now() method, ex. Carbon::now()</token>
  </line>
  <line no="153">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                 - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)</token>
  </line>
  <line no="154">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                 - When the string "now" is passed to the constructor or parse(), ex. new Carbon('now')</token>
  </line>
  <line no="155">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                 - When a string containing the desired time is passed to Carbon::parse().</token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Note the timezone parameter was left out of the examples above and</token>
  </line>
  <line no="157">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               has no affect as the mock value will be returned regardless of its value.</token>
  </line>
  <line no="158">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               To clear the test instance call this method using the default</token>
  </line>
  <line no="159">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               parameter of null.</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               /!\ Use this method for unit tests only.</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT"> * @method void                                               setToStringFormat($format)                                                                                                         @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           use other method or custom format passed to format() method if you need to dump an other string</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           format.</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Set the default format used when type juggling a Carbon instance to a string</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT"> * @method void                                               setTranslator(\Symfony\Component\Translation\TranslatorInterface $translator)                                                      Set the default translator instance to use.</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    setUtf8($utf8)                                                                                                                     @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use UTF-8 language packages on every machine.</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Set if UTF8 will be used for localized date/time.</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT"> * @method void                                               setWeekEndsAt($day)                                                                                                                @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek</token>
  </line>
  <line no="172">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           or roundWeek method. You can also use the 'first_day_of_week' locale setting to change the</token>
  </line>
  <line no="173">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           start of week according to current locale selected and implicitly the end of week.</token>
  </line>
  <line no="174">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Set the last day of week</token>
  </line>
  <line no="175">
    <token name="T_DOC_COMMENT"> * @method void                                               setWeekStartsAt($day)                                                                                                              @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="176">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the</token>
  </line>
  <line no="177">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           'first_day_of_week' locale setting to change the start of week according to current locale</token>
  </line>
  <line no="178">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           selected and implicitly the end of week.</token>
  </line>
  <line no="179">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Set the first day of week</token>
  </line>
  <line no="180">
    <token name="T_DOC_COMMENT"> * @method void                                               setWeekendDays($days)                                                                                                              @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="181">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather consider week-end is always saturday and sunday, and if you have some custom</token>
  </line>
  <line no="182">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           week-end days to handle, give to those days an other name and create a macro for them:</token>
  </line>
  <line no="183">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           ```</token>
  </line>
  <line no="184">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Carbon::macro('isDayOff', function ($date) {</token>
  </line>
  <line no="185">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                               return $date-&gt;isSunday() || $date-&gt;isMonday();</token>
  </line>
  <line no="186">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           });</token>
  </line>
  <line no="187">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Carbon::macro('isNotDayOff', function ($date) {</token>
  </line>
  <line no="188">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                               return !$date-&gt;isDayOff();</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           });</token>
  </line>
  <line no="190">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           if ($someDate-&gt;isDayOff()) ...</token>
  </line>
  <line no="191">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           if ($someDate-&gt;isNotDayOff()) ...</token>
  </line>
  <line no="192">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           // Add 5 not-off days</token>
  </line>
  <line no="193">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           $count = 5;</token>
  </line>
  <line no="194">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           while ($someDate-&gt;isDayOff() || ($count-- &gt; 0)) {</token>
  </line>
  <line no="195">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                               $someDate-&gt;addDay();</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           }</token>
  </line>
  <line no="197">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           ```</token>
  </line>
  <line no="198">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Set weekend days</token>
  </line>
  <line no="199">
    <token name="T_DOC_COMMENT"> * @method bool                                               shouldOverflowMonths()                                                                                                             Get the month overflow global behavior (can be overridden in specific instances).</token>
  </line>
  <line no="200">
    <token name="T_DOC_COMMENT"> * @method bool                                               shouldOverflowYears()                                                                                                              Get the month overflow global behavior (can be overridden in specific instances).</token>
  </line>
  <line no="201">
    <token name="T_DOC_COMMENT"> * @method string                                             singularUnit(string $unit)                                                                                                         Returns standardized singular of a given singular/plural unit name (in English).</token>
  </line>
  <line no="202">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    today($tz = null)                                                                                                                  Create a Carbon instance for today.</token>
  </line>
  <line no="203">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    tomorrow($tz = null)                                                                                                               Create a Carbon instance for tomorrow.</token>
  </line>
  <line no="204">
    <token name="T_DOC_COMMENT"> * @method string                                             translateTimeString($timeString, $from = null, $to = null, $mode = CarbonInterface::TRANSLATE_ALL)                                 Translate a time string from a locale to an other.</token>
  </line>
  <line no="205">
    <token name="T_DOC_COMMENT"> * @method string                                             translateWith(\Symfony\Component\Translation\TranslatorInterface $translator, string $key, array $parameters = [], $number = null) Translate using translation string or callback available.</token>
  </line>
  <line no="206">
    <token name="T_DOC_COMMENT"> * @method void                                               useMonthsOverflow($monthsOverflow = true)                                                                                          @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="207">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="208">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants</token>
  </line>
  <line no="209">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           are available for quarters, years, decade, centuries, millennia (singular and plural forms).</token>
  </line>
  <line no="210">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    useStrictMode($strictModeEnabled = true)                                                                                           @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="211">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="212">
    <token name="T_DOC_COMMENT"> * @method void                                               useYearsOverflow($yearsOverflow = true)                                                                                            @deprecated To avoid conflict between different third-party libraries, static setters should not be used.</token>
  </line>
  <line no="213">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           You should rather use the -&gt;settings() method.</token>
  </line>
  <line no="214">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants</token>
  </line>
  <line no="215">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                                           are available for quarters, years, decade, centuries, millennia (singular and plural forms).</token>
  </line>
  <line no="216">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    withTestNow($testNow = null, $callback = null)                                                                                     Temporarily sets a static date to be used within the callback.</token>
  </line>
  <line no="217">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               Using setTestNow to set the date, executing the callback, then</token>
  </line>
  <line no="218">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               clearing the test instance.</token>
  </line>
  <line no="219">
    <token name="T_DOC_COMMENT"> *                                                                                                                                                                                               /!\ Use this method for unit tests only.</token>
  </line>
  <line no="220">
    <token name="T_DOC_COMMENT"> * @method CarbonImmutable                                    yesterday($tz = null)                                                                                                              Create a Carbon instance for yesterday.</token>
  </line>
  <line no="221">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="222">
    <token name="T_DOC_COMMENT"> * &lt;/autodoc&gt;</token>
  </line>
  <line no="223">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="224">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">FactoryImmutable</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_EXTENDS">extends</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Factory</token>
  </line>
  <line no="225">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="226">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$className</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">CarbonImmutable</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_CLASS">class</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="227">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="228"/>
</source>
